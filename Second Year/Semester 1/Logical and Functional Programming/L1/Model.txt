7.a) Write a function to eliminate the n-th element of a linear list
b) Write a function to determine the successor of a number represented digit by digit as a list, without transforming
the representation of the number from list to number. Example: (1 9 3 5 9 9) --> (1 9 3 6 0 0) 
c) Write a function to return the set of all the atoms of a list. Example: (1 (2 (1 3 (2 4)  3) 1)(1 4)) --> (1 2 3 4)
d) Write a function to test whether a linear list is a set.

a) removeElementFromPos(l1, l2, ..., ln, pos) = {
	[], if n = 0
	[l2, ..., ln], if pos = 1
	l1 ∪ removeElementFromPos(l2, ..., ln, pos - 1), otherwise
}

b) reversed(l1, l2, ..., ln, tail) = {
	tail, if n = 0
	reversed(l2, ..., ln, l1 ∪ tail), otherwise
} 

successorNb(l1, l2, ..., ln) = {
	{0} ∪ successorNb(l2, ..., ln), if l1 = 9 and n != 1
	{0} ∪ {1} , if l1 = 9 and n = 1
	{l1 + 1} ∪ (l2, ..., ln), otherwise
}

c) contains(l1, l2, ..., ln, elem) = {
	false, if n = 0
	true, if l1 = elem
	contains(l2, ..., ln, elem)
}

concat(l1, l2, ..., ln, List) = {
	List, if n = 0
	l1 ∪ concat(l2, ..., ln, List), otherwise
}

createLinearList(l1, l2,..., ln) = {
	[], if n = 0
	l1 ∪ createLinearList(l2, ..., ln), if l1 is an atom
	concatenate(createLinearList(l1), createLinearList(l2, ..., ln)), if l1 is a list
} 

reversed(l1, l2, ..., ln, tail) = {
	tail, if n = 0
	reversed(l2, ..., ln, l1 ∪ tail), otherwise
}

setOfAtoms(l1, l2, ..., ln, tail) = {
	tail, if n = 0
	setOfAtoms(l2, ..., ln, tail), if contains(tail, l1) is true
	setOfAtoms(l2, ..., ln, l1 ∪ tail), otherwise
}

d)
contains(l1, l2, ..., ln, elem) = {
	false, if n = 0
	true, if l1 = elem
	contains(l2, ..., ln, elem), otherwise
}

checkIfSet(l1, l2, ..., ln) = {
	true, if n = 0
	false, if contains(l2, ..., ln, l1) is true
	checkIfSet(l2, ..., ln), otherwise
}
